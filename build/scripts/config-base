#!/bin/bash

export TEXTDOMAIN=pacstrap
export TEXTDOMAINDIR=./locale
#export TEXTDOMAINDIR=/usr/local/share/locale

. gettext.sh

. ./pacstrap.lib


set -e



[ -z "${HOSTNAME_}" ] && HOSTNAME_=alarmpi
[ -z "${ROOTPWD}" ] && ROOTPWD=root
[ -z "${USERNAME}" ] && USERNAME=alarm
[ -z "${USERPWD}" ] && USERPWD=alarm
[ -z "${AUDIOOUT}" ] && AUDIOOUT=0

directory=0


while getopts ':a:dho:p:r:s:u:' flag
do
case $flag in
a)
 AUDIOOUT=${OPTARG}
;;
d)
directory=1
;;
h)
usage
exit 0
;;
o)
HOSTNAME_=${OPTARG}
;;
p)
USERPWD=${OPTARG}
;;
r)
ROOTPWD=${OPTARG}
;;
s)
	SERVICES="${OPTARG}"
;;
u)
USERNAME=${OPTARG}
;;
:)
msg=$(gettext "Option requires an argument")
die '%s: %s -- '\''%s'\' "${0##*/}" "${msg}" "$OPTARG"
;;
?)
msg=$(gettext "Invalid option")
die '%s: %s -- '\''%s'\' "${0##*/}" "${msg}" "$OPTARG"
;;
esac
done

shift $(( OPTIND - 1 ))

msg=$(gettext "This script must be run with root privilages")
(( EUID == 0 )) || die "$msg"

(( $# )) || die "No root directory specified"

newroot=$1; shift


[[ -d $newroot ]] || die "%s is not a directory" "$newroot"
#if ! mountpoint -q "${newroot}" && (( ! directory )); then
#die '%s is not a mountpoint!' "$newroot"
#fi


# /boot on the new system should be populated by raspberrypi-bootloader.
# The following lines should not be needed.
#cp /boot/*.bin "${newroot}"/boot
#cp /boot/*.dat "${newroot}"/boot
#cp /boot/*.elf "${newroot}"/boot

chroot "${newroot}"/ mknod -m 600 /dev/console c 5 1
chroot "${newroot}"/ mknod -m 666 /dev/null c 1 3
chroot "${newroot}"/ mknod -m 666 /dev/zero c 1 5
chroot "${newroot}"/ mknod -m 666 /dev/urandom c 1 8

# set the host name
input="echo \"${HOSTNAME_}\" > /etc/hostname"
echo "${input}"
chroot "${newroot}" /bin/bash -c "${input}"

# add root partition mount info to /etc/fstab
chroot "${newroot}" /bin/bash -c 'echo -e "\n\n/dev/mmcblk0p1  /boot   vfat    defaults        0       0\n\n" >> /etc/fstab'

# add line to /etc/hosts.allow to allow all hosts
chroot "${newroot}" /bin/bash -c 'echo "SSHD: ALL" >> /etc/hosts.allow'

# add dtparam=audio=on to /boot/config.txt
#chroot "${newroot}" /bin/bash -c "echo -e \"\n\ndtparam=audio=on\n\n\" >> /boot/config.txt"

set_password "${newroot}" root "${ROOTPWD}"

# Copy all modified files into the new system
	cp -R ../files/* "${newroot}"

# Add the regular user
add_user "${newroot}" "${USERNAME}"
set_password "${newroot}" "${USERNAME}" "${USERPWD}"

# turn on MATE accessibility
chroot "${newroot}" /bin/bash -c "sudo -u ${USERNAME} dbus-launch gsettings set org.mate.interface accessibility true"
# The most recent dbus-daemon, started by dbus-launch above, must be killed in order to unmount the image root partition.
pkill -n dbus-daemon
# Make Orca start automatically
chroot "${newroot}" /bin/bash -c "sudo -u ${USERNAME} dbus-launch gsettings set org.gnome.desktop.a11y.applications screen-reader-enabled true"
# Kill the most recent dbus-daemon again
pkill -n dbus-daemon

for SERVICE in $SERVICES
do
	manage_service "${newroot}" enable "${SERVICE}"
done

# Set the audio output
chroot "${newroot}" /bin/bash -c "amixer cset numid=3 $AUDIOOUT"
chroot "${newroot}" /bin/bash -c "alsactl store"

newrootsize=$(du -hs "${newroot}" | cut -f1 -d' ')
echo $(eval_gettext "\$progname completed successfully") ; echo
echo $(eval_gettext "Size of installation in \${newroot} is now \${newrootsize}") ; echo

