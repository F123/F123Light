#!/bin/bash
#
# aur-install
#
# Copyright 2018  F123 Consulting, <information@f123.org>
# Copyright 2018, Kyle, <kyle@free2.ml>
#
# This is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free
# Software Foundation; either version 3, or (at your option) any later
# version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this package; see the file COPYING.  If not, write to the Free
# Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
#--code--

export TEXTDOMAIN=aur-install
export TEXTDOMAINDIR=../locale
#export TEXTDOMAINDIR=/usr/local/share/locale

. gettext.sh

. ./functions


set -e

if ! check_root ; then
	PROGNAME=$0
	echo $(eval_gettext "Script must be run as root, try: sudo \$PROGNAME") ; echo
	exit 1
fi

packagelist=

while getopts ':hl:' flag
do
case $flag in
h)
usage
exit 0
;;
l)
packagelist=$OPTARG
;;
:)
msg=$(gettext "Option requires an argument")
die '%s: %s -- '\''%s'\' "${0##*/}" "${msg}" "$OPTARG"
;;
?)
msg=$(gettext "Invalid option")
die '%s: %s -- '\''%s'\' "${0##*/}" "${msg}" "$OPTARG"
;;
esac
done

shift $(( OPTIND - 1 ))

(( $# )) || die "No root directory specified"

newroot=$1; shift

[[ -z "${packagelist}" ]] && die "No package list supplied"
[[ -f "${packagelist}" ]] || die "Package list ${packagelist} does not exist"
[[ -r "${packagelist}" ]] || die "Package list ${packagelist} is not readable"

# A temporary directory holding all build files should be created on the mounted image file.
# It must be owned by the regular user, which will be given the uid 1000.
# This whole directory will be removed once the AUR packages are installed.
mkdir -p "${newroot}/aur"
chown 1000 "${newroot}/aur"

# From the image chroot, Clone the package build information from the AUR, then build and install each package.
for package in $(cat "$packagelist"); do
	systemd-nspawn -a -q -D "${newroot}" sudo -u \#1000 /bin/bash -c \
		"{
cd /aur;
			git clone https://aur.archlinux.org/${package}.git;
			cd $package;
			MAKEFLAGS=-j$(nproc) makepkg -d -A;
		}"
	systemd-nspawn -a -q -D "${newroot}" /bin/bash -c \
		"{
			# It is assumed that someone building an image knows what he/she is doing, and won't install AUR packages that make forced installations or dependency skips dangerous.
			# That said, some packages have been found not to build properly unless forceably installed to overwrite conflicting files or certain dependencies are skipped.
			cd /aur/$package;
			yes | pacman -Uddf *pkg.tar.xz --noprogressbar;
		}"
done

# cleanup the working package build directory
rm -R "${newroot}/aur"
	
echo done

exit 0

