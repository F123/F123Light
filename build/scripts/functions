usage() {
	scriptname=$0
	echo $(gettext "Usage:")
	echo "sudo $scriptname "

} >&2 # usage

out() {
	printf "$1 $2\n" "${@:3}"
} # out

error() {
	out "ERROR:" "$@"
} >&2 # error

die() {
	error "$@"
	usage
	exit 1
} # die

check_deps () {
	[ -f /usr/bin/parted ] || pacman -S parted --noconfirm --noprogressbar
	[ -f /usr/bin/pacstrap ] || pacman -S arch-install-scripts --noconfirm --noprogressbar
	[ -f /usr/bin/partx ] || pacman -S util-linux --noconfirm --noprogressbar
	[ -f /usr/bin/dbus-launch ] || pacman -S dbus --noconfirm --noprogressbar
} # check_deps

add_user() {
	local chroot_=$1
	local username=$2

	echo $(eval_gettext "Add user \${username}")
	input="useradd -m -g users -G wheel,storage,power,uucp,audio -s /bin/bash ${username}"
	chroot "${chroot_}" /bin/bash -c "${input}"
} # add_user

set_password() {
	local chroot_=$1
	local username=$2
	local userpwd=$3

	echo $(eval_gettext "Setting password for user \${username}")
	input="echo -e \"${userpwd}\n${userpwd}\n\" | passwd ${username}"
	chroot "${chroot_}" /bin/bash -c "${input}"
} # set_password

manage_service() {
	local chroot_=$1
	local operation=$2
	local service=$3

	echo $(eval_gettext "Calling systemctl to \${operation} \${service} service")
	#input="which ${service} && systemctl ${operation} ${service}"
	#chroot "${chroot_}" /bin/bash -c \"${input}\""
	chroot "${chroot_}" systemctl "${operation}" "${service}"
} # manage_service

check_root() {
	(( EUID == 0 )) || return 1
	return 0
} # check_root

clean_up() {
	local WORKDIR=${1}
#	local ROOTMP=${2}

	un_mount_partitions ${WORKDIR}
	remove_mount_points ${WORKDIR}

	if cat ${WORKDIR}/rpi-image-tool-mount-points | grep loop >/dev/null
	then
		remove_loop_devices ${WORKDIR}
	fi

	rm ${WORKDIR}/rpi-image-tool-mount-points
} # clean_up

delete_partitions() {
	local DEVICE=${1}

	for PART in `parted -ms /dev/sda -- print | perl -ne "if (m/^\d/) {print;}" | cut -f1 -d':' | sort -r`
	do
		parted ${DEVICE} -- rm ${PART} >/dev/null
	done
} # delete_partitions

loop_devices() {
	local WORKDIR=${1}
	local IMAGEFILE=${2}
	local __BOOTP=${3}
	local __ROOTP=${4}

	echo $(gettext "Setting up the loop device") ; echo
	LOOPDEVICE=$(losetup -P -f --show ${IMAGEFILE})
	BOOTP=${LOOPDEVICE}p1
	ROOTP=${LOOPDEVICE}p2
	eval $__BOOTP="'$BOOTP'"
	eval $__ROOTP="'$ROOTP'"
} # loop_devices

mount_device() {
	local WORKDIR=${1}
	local DEVICE=${2}
	local ROOTMP=${3}

	[ -b "${DEVICE}" ] || { echo "Supplied device name ${DEVICE} does not exist or is not a block device"; exit 1; }
	echo $(gettext "Making the work directory if it doesn't exist") ; echo
	[ -d "${WORKDIR}" ] || mkdir -p "${WORKDIR}"
	BOOTP=${DEVICE}1
	ROOTP=${DEVICE}2
	#sleep 2
	mount_partitions ${WORKDIR} ${BOOTP} ${ROOTP} ${BOOTMP} ${ROOTMP}
} # mount_device

mount_image() {
	local WORKDIR=${1}
	local IMAGEFILE=${2}
	local BOOTMP=${3}
	local ROOTMP=${4}

	[ -f "${IMAGEFILE}" ] || { echo "Supplied image file does not exist"; exit 1; }
	echo $(gettext "Making the work directory if it doesn't exist") ; echo
	[ -d "${WORKDIR}" ] || mkdir -p "${WORKDIR}"
	loop_devices ${WORKDIR} ${IMAGEFILE} BOOTP ROOTP
	mount_partitions ${WORKDIR} ${BOOTP} ${ROOTP} ${BOOTMP} ${ROOTMP}
} # mount_image

mount_partitions() {
	local WORKDIR=${1}
	local BOOTP=${2}
	local ROOTP=${3}
	local BOOTMP=${4}
	local ROOTMP=${5}

	echo $(gettext "Making the root mount point if it doesn't exist") ; echo
	[ -d "${WORKDIR}/${ROOTMP}" ] || mkdir -p "${WORKDIR}/${ROOTMP}"
	mount ${ROOTP} ${WORKDIR}/${ROOTMP}

	echo $(gettext "Making the boot mount point if it doesn't exist") ; echo
	[ -d "${WORKDIR}/${ROOTMP}/${BOOTMP}" ] || mkdir -p "${WORKDIR}/${ROOTMP}/${BOOTMP}"
	mount ${BOOTP} ${WORKDIR}/${ROOTMP}/${BOOTMP}

	echo $(eval_gettext "Writing mount-points to \$WORKDIR/rpi-image-tool-mount-points") ; echo
	REALROOTMOUNTPOINT=$(realpath ${WORKDIR}/${ROOTMP})
	REALBOOTMOUNTPOINT=$(realpath ${WORKDIR}/${ROOTMP}/${BOOTMP})
	echo -e "1:${BOOTP}:${REALBOOTMOUNTPOINT}\n2:${ROOTP}:${REALROOTMOUNTPOINT}" > ${WORKDIR}/rpi-image-tool-mount-points
} # mount_partitions

new_image() {
	local WORKDIR=${1}
	local IMAGEFILE=${2}
	local BOOTLABEL=${3}
	local ROOTLABEL=${4}
	local BOOTMP=${5}
	local ROOTMP=${6}
	local BLOCKCOUNT=${7}
	local BLOCKSIZE=${8}
	local SPLIT=${9}

	echo $(gettext "Making the work directory if it doesn't exist") ; echo
	[ -d ${WORKDIR} ] || mkdir -p "${WORKDIR}"

	echo $(gettext "Running dd to make a raw (zero-filled) image") ; echo
	dd if=/dev/zero of=${IMAGEFILE} bs=${BLOCKSIZE} count=${BLOCKCOUNT}

	echo $(gettext "Partitioning the raw image file") ; echo
	parted "${IMAGEFILE}" --script -- mklabel msdos
	echo $(gettext "Making the boot partition") ; echo
	parted "${IMAGEFILE}" --script -- mkpart primary fat32 1 ${SPLIT}
	echo $(gettext "Setting the boot partition bootable") ; echo
	parted "${IMAGEFILE}" --script set 1 boot on
	echo $(gettext "Making the root partition") ; echo
	parted "${IMAGEFILE}" --script -- mkpart primary ext4 ${SPLIT} -1

	local BOOTP
	local ROOTP

	loop_devices ${WORKDIR} ${IMAGEFILE} BOOTP ROOTP
	echo $(eval_gettext "Boot partition is \$BOOTP") ; echo
	echo $(eval_gettext "Root partition is \$ROOTP}") ; echo

	echo $(gettext "Making file systems") ; echo
	mkfs.vfat -n ${BOOTLABEL} ${BOOTP}
	mkfs.ext4 -L ${ROOTLABEL} ${ROOTP}

	mount_partitions ${WORKDIR} ${BOOTP} ${ROOTP} ${BOOTMP} ${ROOTMP}
} # new_image

prepare_device() {
	local WORKDIR=${1}
	local DEVICE=${2}
	local BOOTMP=${3}
	local ROOTMP=${4}
	local BLOCKCOUNT=${5}
	local BLOCKSIZE=${6}
	local SPLIT=${7}	   

	echo $(gettext "Making the work directory if it doesn't exist") ; echo
	[ -d ${WORKDIR} ] || mkdir -p "${WORKDIR}"

	echo $("Partitioning the device") ; echo
	parted "${DEVICE}" --script -- mklabel msdos
	echo $(gettext "Making the boot partition...") ; echo
	parted "${DEVICE}" --script -- mkpart primary fat32 1 ${SPLIT}
	echo $(gettext "Setting the boot partition bootable") ; echo
	parted "${DEVICE}" --script set 1 boot on
	echo $(gettext "Making the root partition") ; echo
	parted "${DEVICE}" --script -- mkpart primary ext4 ${SPLIT} -1
	echo $(eval_gettext "Boot partition is \${DEVICE}1") ; echo
	echo $(eval_gettext "Root partition is \${DEVICE}2") ; echo

	echo $(gettext "Making file systems") ; echo
	mkfs.vfat ${DEVICE}1
	mkfs.ext4 ${DEVICE}2

	mount_partitions ${WORKDIR} ${DEVICE}1 ${DEVICE}2 ${BOOTMP} ${ROOTMP}
} # prepare_device

remove_loop_devices() {
	local WORKDIR=${1}	

	echo $(gettext "Removing loop devices") ; echo
	FIRSTPART=$(head -1 ${WORKDIR}/rpi-image-tool-mount-points | cut -f2 -d:)
	LOOP=${FIRSTPART%%p1}
	echo $(eval_gettext "Removing loop device \${LOOP}") ; echo
	losetup -d "${LOOP}"
} # remove_loop_devices

remove_mount_points() {
	local WORKDIR=${1}

	[ -f ${WORKDIR}/rpi-image-tool-mount-points ] || { echo "${WORKDIR}/rpi-image-tool-mount-points does not exist" ; exit 1 ; }
	cat ${WORKDIR}/rpi-image-tool-mount-points | cut -f3 -d: | \
	while read MOUNTPOINT
	do
		echo $(eval_gettext "Removing \$MOUNTPOINT") ; echo
		[ -d "${MOUNTPOINT}" ] && rmdir "${MOUNTPOINT}"
	done
} # remove_mount_points

unmount_partitions() {
	local WORKDIR=${1}

	if [ ! -f "${WORKDIR}/rpi-image-tool-mount-points" ]; then
		echo $(gettext "Could not find the file rpi-image-tool-mount-points in the work directory") ; echo
		exit 1
	fi

	echo $(gettext "umount partitions") ; echo
	cat ${WORKDIR}/rpi-image-tool-mount-points | cut -f3 -d: | \
	while read MOUNTPOINT
	do
		echo $(eval_gettext "umount \$MOUNTPOINT") ; echo
		umount "${MOUNTPOINT}"
	done
} # unmount partitions

validate_blockcount() {
	echo "$BLOCKCOUNT" | grep "^[0-9][0-9]*$" >/dev/null
	if [ $? -eq 1 ]; then
		echo $(gettext "Bad block count") ; echo
		usage
	fi
} # validate_blockcount() {

validate_blocksize() {
	declare -r BLOCKSIZE=${1}
	case "$BLOCKSIZE" in
		'1M'|'1MB')
		;;
		*)
			echo $(gettext "Invalid block-size") ; echo
			usage
			exit 1
		;;
	esac
} # validate_blocksize() {

validate_mountpoint() {
	declare -r MOUNTPOINT=${1}
	echo $MOUNTPOINT | grep "^[\./A-Za-z0-9\-][\.A-Za-z0-9\-]*" >/dev/null
	if [ $? -eq 1 ]; then
		echo $(gettext "Bad mount-point") ; echo
		exit 1
	fi
} # validate_mountpoint() {

validate_split() {
	local SPLIT=${1}
	echo "${SPLIT}" | grep "^[0-9][0-9]*$" >/dev/null
	if [ $? -eq 1 ]; then
		echo $(gettext "Bad split") ; echo
		usage
	fi
} # validate_split() {
